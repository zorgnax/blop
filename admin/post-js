#!/usr/bin/perl
use lib "../lib";
use blopcgi js => 1;

$blop->read_conf;
$blop->assert_admin;
$blop->assert_csrf;

my $out = {};

my $postid = $cgi->param("postid");
my $title = $cgi->param("title");
my $content = $cgi->param("content");
my $post;

if ($postid) {
    $post = $blop->post(postid => $postid) or die "Invalid postid.\n";
}

my $url = $cgi->param("url");
if (defined $url && length($url)) {
    if (!$blop->url_available($url) && (!$post || $post->{url} ne $url)) {
        $out->{urlError} = "Unavailable.";
        $out->{error} = 1;
    }
}
else {
    while (1) {
        $url = "post/" . $blop->token(4, "abcdefghijklmnopqrstuvwxyz");
        last if $blop->url_available($url);
    }
}

my $now = Blop::Date->now->str;

my $published = $cgi->param("published");
if (defined $published && length($published)) {
    my $date = Blop::Date->new($published);
    if ($date) {
        $published = $date->str;
    }
    else {
        $out->{publishedError} = "Invalid format.";
        $out->{error} = 1;
    }
}
else {
    $published = $now;
}

my $category_name = $cgi->param("category");
if (defined $category_name && length($category_name)) {
    $category_name =~ s{^\s+|\s+$}{}g;
    if ($category_name =~ m{,}) {
        $out->{categoryError} = "Commas are not allowed.";
        $out->{error} = 1;
    }
}

my $tags = $cgi->param("tags");
my @tags;
if (defined $tags && length($tags)) {
    while ($tags =~ /([^,]+)/gc) {
        my $tag = $1;
        $tag=~ s{^\s+|\s+$}{}g;
        next if !length($tag);
        push @tags, $tag;
    }
}

if ($out->{error}) {
    print $blop->http_header("Content-Type" => "application/json");
    print $blop->escape_json($out);
    exit;
}

my $category;
if (defined $category_name && length($category_name)) {
    $category = $blop->category(name => $category_name);
    if (!$category) {
        $category = $blop->add_category(name => $category_name);
    }
}
my $categoryid = $category ? $category->{categoryid} : 0;

if (!$postid) {
    my $sth = $blop->dbh->prepare(<<EOSQL);
insert into posts set
    title=?, url=?, added=?, published=?, categoryid=?, content=?
EOSQL
    $sth->execute($title, $url, $now, $published, $categoryid, $content);
    $postid = $sth->{mysql_insertid};

    $sth = $blop->dbh->prepare(<<EOSQL);
insert into tags set postid=?, name=?
EOSQL
    for my $tag (@tags) {
        $sth->execute($postid, $tag);
    }

    $post = $blop->post(postid => $postid);
    $post->update_content;

    my $label = $title ? $title : "Post $postid";
    $blop->log(content => "Added post \"$label\"", postid => $postid);

    print $blop->http_header("Content-Type" => "application/json");
    print $blop->escape_json({ok => 1, postid => $postid});
    exit;
}

my %args;

if ($post->{title} ne $title) {
    $args{title} = $title;
}
if ($post->{url} ne $url) {
    $args{url} = $url;
}
if ($post->{published} ne $published) {
    $args{published} = $published;
}
if ($post->{categoryid} ne $categoryid) {
    $args{categoryid} = $categoryid;
}
if ($post->{content} ne $content) {
    $args{content} = $content;
    $post->{content} = $content;
}

if (%args) {
    my $sets = join ", ", map "$_=" . $blop->dbh->quote($args{$_}), keys %args;
    my $sth = $blop->dbh->prepare(<<EOSQL);
update posts set $sets where postid=?
EOSQL
    $sth->execute($postid);
}

my %tag_hash;
my $tags_edited = 0;
for my $tag (@tags) {
    if (!$post->has_tag($tag)) {
        $post->add_tag($tag);
        $tags_edited = 1;
    }
    $tag_hash{$tag} = $tag;
}

for my $tag (@{$post->tags}) {
    if (!$tag_hash{$tag}) {
        $post->rm_tag($tag);
        $tags_edited = 1;
    }
}

$post->update_content;

if (%args || $tags_edited) {
    my @parts = keys %args;
    push @parts, "tags" if $tags_edited;
    my $parts = $blop->comma_and(@parts);
    $parts .= " of " if $parts;
    $blop->log(content => "Edited ${parts}post \"" . $post->label . "\"", postid => $postid);
}

if ($post->{title} ne $title) {
    my $label = $title ? $title : "Post $postid";
    my $content = "Renamed post \"" . $post->label . "\" to \"" . $label . "\"";
    $blop->log(content => $content, postid => $postid);
}

print $blop->http_header("Content-Type" => "application/json");
print $blop->escape_json({ok => 1, postid => $postid});

