#!/usr/bin/perl
use lib "../lib";
use blopcgi js => 1;

$blop->read_conf;

if ($blop->session) {
    $blop->assert_csrf;
}

my $out = {};

my $name = $cgi->param("name");
if (defined $name && $name =~ /^\s*$/) {
    $out->{nameError} = "Name cannot be blank.";
    $out->{error} = 1;
}

my $email = $cgi->param("email");
if (defined $email && $email =~ /^\s*$/) {
    $out->{emailError} = "Email cannot be blank.";
    $out->{error} = 1;
}
elsif (defined $email && $email !~ /^[^\w\._-]+\@.+\.\w+$/) {
    $out->{emailError} = "Invalid email.";
    $out->{error} = 1;
}

my $content = $cgi->param("content");
if (defined $content && $content =~ /^\s*$/) {
    $out->{mesg} = "Content cannot be blank.";
    $out->{error} = 1;
}

if ($out->{error}) {
    print $blop->http_header("Content-Type" => "application/json");
    print $blop->escape_json($out);
    exit;
}

my $postid = $cgi->param("postid");
my $post;
my $pageid = $cgi->param("pageid");
my $page;

if ($postid) {
    $post = $blop->post(postid => $postid) or die "Invalid postid.\n";
    undef $pageid;
}
elsif ($pageid) {
    $page = $blop->page(pageid => $pageid) or die "Invalid pageid.\n";
    undef $postid;
}

my $now = Blop::Date->now->str;
my $commentid = $cgi->param("commentid");

if (!$blop->admin && !$commentid) {
    my $sth = $blop->dbh->prepare(<<EOSQL);
select commentid from comments where ipaddr=? and added > ? - interval 1 minute
EOSQL
    my $rows = int $sth->execute($ENV{REMOTE_ADDR}, $now);
    if ($rows) {
        die "Please wait before submitting another comment.\n";
    }
    $sth = $blop->dbh->prepare(<<EOSQL);
select commentid from comments where ipaddr=? and added > ? - interval 1 hour
EOSQL
    $rows = int $sth->execute($ENV{REMOTE_ADDR}, $now);
    if ($rows > 9) {
        die "Please wait before submitting another comment.\n";
    }
}

my $cmnt = $cgi->cookie("cmnt");

if (!$commentid) {
    die "Name must be defined.\n" if !defined $name;
    die "Email must be defined.\n" if !defined $email;
    die "Content must be defined.\n" if !defined $content;
    die "A postid or a pageid is required.\n" if !$postid && !$pageid;

    if ($postid && !$blop->{conf}{post_comments}) {
        die "Post comments not enabled.\n";
    }
    if ($pageid && !$blop->{conf}{page_comments}) {
        die "Page comments not enabled.\n";
    }

    my $status = $blop->{conf}{mod_comments} ? "Pending" : "Approved";

    if (!$cmnt) {
        $cmnt = $blop->token(22);
        $blop->{new_cmnt} = $cmnt;
    }

    my $sth = $blop->dbh->prepare(<<EOSQL);
insert into comments set
    postid=?, pageid=?, name=?, email=?, ipaddr=?, cookie=?, added=?,
    status=?, content=?
EOSQL
    $sth->execute(
        $postid, $pageid, $name, $email, $ENV{REMOTE_ADDR}, $cmnt, $now,
        $status, $content);
    $commentid = $sth->{mysql_insertid};

    print $blop->http_header("Content-Type" => "application/json");
    print $blop->escape_json({ok => 1, commentid => $commentid});
    exit;
}

if (!$blop->admin) {
    my $sth = $blop->dbh->prepare(<<EOSQL);
select commentid from comments where ipaddr=? and edited > ? - interval 1 hour
EOSQL
    my $rows = int $sth->execute($ENV{REMOTE_ADDR}, $now);
    if ($rows > 9) {
        die "Please wait before editing another comment.\n";
    }
}

my $comment = $blop->comment(commentid => $commentid)
    or die "Invalid commentid.\n";

if (!$cmnt || $cmnt ne $comment->{cookie}) {
    die "Unauthorized.\n";
}

if ($comment->{status} eq "Approved") {
    die "Approved comments can't be edited.";
}

my %args;

if (defined $name && $name ne $comment->{name}) {
    $args{name} = $name;
}
if (defined $email && $email ne $comment->{email}) {
    $args{email} = $email;
}
if (defined $content && $content ne $comment->{content}) {
    $args{content} = $content;
}

if (%args) {
    $args{edited} = $now;
    my $sets = join ", ", map "$_=" . $blop->dbh->quote($args{$_}), keys %args;
    my $sth = $blop->dbh->prepare(<<EOSQL);
update comments set $sets where commentid=?
EOSQL
    $sth->execute($commentid);
}

print $blop->http_header("Content-Type" => "application/json");
print $blop->escape_json({ok => 1, commentid => $commentid});

