#!/usr/bin/perl
use lib "../lib";
use blopcgi js => 1;

$blop->read_conf;
$blop->assert_admin;
$blop->assert_csrf;

my $out = {};

my $pageid = $cgi->param("pageid");
my $content = $cgi->param("content");
my $page;

if ($pageid) {
    $page = $blop->page(pageid => $pageid) or die "Invalid pageid.\n";
}

my $title = $cgi->param("title");
if (!defined $title || !length($title)) {
    $out->{titleError} = "Title cannot be empty.";
    $out->{error} = 1;
}

my $url = $cgi->param("url");
$url = "" if !defined $url;
if (!$page || $page->{url} ne $url) {
    if (!$blop->url_available($url)) {
        $out->{urlError} = "Unavailable.";
        $out->{error} = 1;
    }
}

my $now = Blop::Date->now->str;

my $published = $cgi->param("published");
if (defined $published && length($published)) {
    my $date = Blop::Date->new($published);
    if ($date) {
        $published = $date->str;
    }
    else {
        $out->{publishedError} = "Invalid format.";
        $out->{error} = 1;
    }
}
else {
    $published = $now;
}

my $sequence = $cgi->param("sequence");
my $parentid = $cgi->param("parentid");

if ($out->{error}) {
    print $blop->http_header("Content-Type" => "application/json");
    print $blop->escape_json($out);
    exit;
}

if (!$pageid) {
    my $sth = $blop->dbh->prepare(<<EOSQL);
insert into pages set
    title=?, url=?, added=?, published=?, content=?, sequence=?, parentid=?
EOSQL
    $sth->execute($title, $url, $now, $published, $content, $sequence, $parentid);
    $pageid = $sth->{mysql_insertid};

    $page = $blop->page(pageid => $pageid);
    $page->update_content;

    my $label = $title ? $title : "Page $pageid";
    $blop->log(content => "Added page \"$label\"", pageid => $pageid);

    print $blop->http_header("Content-Type" => "application/json");
    print $blop->escape_json({ok => 1, pageid => $pageid});
    exit;
}

my %args;

if ($page->{title} ne $title) {
    $args{title} = $title;
}
if ($page->{url} ne $url) {
    $args{url} = $url;
}
if ($page->{published} ne $published) {
    $args{published} = $published;
}
if ($page->{content} ne $content) {
    $args{content} = $content;
    $page->{content} = $content;
}
if ($page->{sequence} ne $sequence) {
    $args{sequence} = $sequence;
}
if ($page->{parentid} ne $parentid) {
    $args{parentid} = $parentid;
}

if (%args) {
    my $sets = join ", ", map "$_=" . $blop->dbh->quote($args{$_}), keys %args;
    my $sth = $blop->dbh->prepare(<<EOSQL);
update pages set $sets where pageid=?
EOSQL
    $sth->execute($pageid);
}

$page->update_content;

my $parts = $blop->comma_and(keys %args);
$parts .= " of " if $parts;
$blop->log(content => "Edited ${parts}page \"" . $page->label . "\"", pageid => $pageid);
if ($page->{title} ne $title) {
    my $label = $title ? $title : "Page $pageid";
    my $content = "Renamed page \"" . $page->label . "\" to \"" . $label . "\"";
    $blop->log(content => $content, pageid => $pageid);
}

print $blop->http_header("Content-Type" => "application/json");
print $blop->escape_json({ok => 1, pageid => $pageid});

